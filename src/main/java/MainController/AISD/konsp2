Класифікація структур даних

1)	За способом представлення:
a.	Фізичне – представлення даних у пам’яті машини (внутрішня структура або структура пам’яті);
b.	Логічне – розгляд структури даних без врахування її представлення в машинній пам’яті (абстрактна структура);
2)	За складністю:
a.	Прості – дані, які не можуть бути розподілені на складові частини менше, ніж біти;
b.	Інтегровані – дані, складовими частинами яких є інші структури даних (прості чи інтегровані);
3)	За наявністю зв’язків:
a.	Зв’язні – наявність зв’язку між елементами структури (списки, дерева);
b.	Не зв’язні – відсутність зв’язків між елементами структури (масиви, рядки);
4)	За мінливістю:
a.	Статичні – розмір пам’яті, виділений на структуру даних, не змінюється під час виконання програм;
b.	Динамічні – розмір пам’яті змінюється під час виконання програм;
c.	Напівстатична – може бути і статичною, і динамічною в залежності від умов задачі;
5)	За характером упорядкованості елементів:
a.	Лінійні – послідовний розподіл елементів у пам’яті;
b.	Нелінійні – довільний зв’язний розподіл елементів у пам’яті;
6)	За видом пам’яті:
a.	Для оперативної пам’яті;
b.	Для зовнішньої пам’яті;
Інформація для кожного типу однозначно визначає:
1.	Структуру збереження даних зазначеного типу;
2.	Припустимі значення, що може мати об’єкт описуваного типу;
3.	Припустимі операції, що можуть бути застосовані до об’єкту описуваного типу;
Над усіма структурами даних можуть виконуватись 4 базові операції фізичного рівня:
1)	Створити;
2)	Знищити;
3)	Вибір/доступ;
4)	Відновлення;


Дерево - сукупність елементів, які називаються вузлами, та відношень, що утворюють ієрархічну структуру даних.
Степінь дерева - максимальна степінь вузла.
Бінарне дерево - дерево, максимальний степінь яких дорівнює 2. Якщо стеінь більше 2-х, таке дерево називають розгалуженим.
Висота вузла - довжина самого довгого шляху з цього вузла до будь-якого листа.
Висота дерева дорівнює висоті кореня.
Глибина вузла - довжина шляху від кореня до цього вузла.
Повне бінарне дерево - коли на всіх рівнях, менший за n, всі вузли мають степінь 2, а на рівні n - 0.
Строго бінарне дерево - степінь вузлів яких дорівнює 2 або 0.
Ідеально збалансоване дерево - число вершин в його лівих і правих піддеревах відрізняється не більше ніж на одиницю.
Впорядковане дерево - якщо вузли дерева впорядковані зліва направо.


ОБХОДИ  ДЕРЕВ
Під обходом бінарного дерева визначають порядок проходження всіх вершин.
Всі способи рекурсивно можна визначити:
1) Якщо дерево є 0, то обхід заноситься в 0 дерево;
2) Якщо дерево має 1 вузол, то список обходу заноситься в цей вузол;
3) Якщо дерево має корінь r та піддерева а і b, то для різних підходів є свій спосіб:

Прямий порядок обходу:
1) Потрапити в корінь r;
2) Пройти в прямому порядку ліве піддерево;
3) Пройти в прямому порядку правве піддерево;

Зворотній порядок обходу:
1) Пройти в зворотньому порядку ліве піддерево;
2) Пройти в зворотньому порядку праве піддерево;
3) Потрапити в корінь r;

Симетричний порядок обходу:
1) Пройти в симетричному порядку лыве пыддерево А;
2) потрапити в корінь r;
3) Пройти в симетричному порядку праве піддерево B;

Коди Хаффмана
Код Хаффмана - ефективний метод стискання даних, які в залежності від характеристик цих даних дозволяють зекономити від 20-ти до 90% об'єму пам'яті.
Дані - послідовність символів.
В алгоритмі Хаффмана використовується таблиця, яка містить частоти імовірності появи тих або інших символів.
За допомогою цієї таблиці визначається оптимальне представлення кожного символа у вигляді бінарного рядка.
Алгоритм:
1) Обирається 2 листи з найменшою частотою і комбінується в одне дерево з вагою, рівною сумі частот цих листів. При злитті утворюється новий вузол, який стає коренем об'єднаного дерева;
2) Обираємо з лісу 2 дерева з найменшою вагою і комбінуємо їх;
3) Якщо, залишилося одне дерево, воно відповудає коду, який при заданих частотах має мінімальну можливу середню довжину. Бінарне кодове слово, що представляє символи, що інтерпретується як шлчх від кореня до цього символа, 0 - перехід до лівого піддерева, 1 - до  правого.


	 a	b	c	d	e	f
частота   10	5	12	11	40	80
фікс. д     000	001	010	011	100	101
змін. д 	0001	0000	0011	0010	01	1
